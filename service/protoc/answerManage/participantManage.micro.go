// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: answerManage/participantManage.proto

/*
Package participantManage is a generated protocol buffer package.

It is generated from these files:
	answerManage/participantManage.proto

It has these top-level messages:
	JudgeReq
	JudgeRsp
	AddProblemHavedAnswerReq
	AddProblemHavedAnswerRsp
	UpdateWaitedAnswerReq
	UpdateWaitedAnswerResp
	UpdateUserAnswerReq
	UpdateUserAnswerRsp
	PTeamEventIdReq
	WaitAnswerRsp
	NolAnswer
	MultiAnswer
	ParticipantIdReq
	AnswerTimeReq
	ParticipantMember
	EPInsertReq
	EPInsertRsp
	GetPListByUserIdReq
	PEMessage
	PEMessageList
	PUserEventIdReq
	ParticipantMessage
	ParticipantMessageList
*/
package answerManage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ParticipantManage service

type ParticipantManageService interface {
	EventParticipantInsert(ctx context.Context, in *EPInsertReq, opts ...client.CallOption) (*EPInsertRsp, error)
	GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, opts ...client.CallOption) (*PEMessageList, error)
	GetParticipantByUserAndEvent(ctx context.Context, in *PUserEventIdReq, opts ...client.CallOption) (*ParticipantMessage, error)
	GetCorrectAnswerByParticipantId(ctx context.Context, in *ParticipantIdReq, opts ...client.CallOption) (*WaitAnswerRsp, error)
	GetAnswerTimeByParticipantId(ctx context.Context, in *ParticipantIdReq, opts ...client.CallOption) (*AnswerTimeReq, error)
	GetMemberCreditByTeamId(ctx context.Context, in *PTeamEventIdReq, opts ...client.CallOption) (*ParticipantMessageList, error)
	UpdateUserAnswer(ctx context.Context, in *UpdateUserAnswerReq, opts ...client.CallOption) (*UpdateUserAnswerRsp, error)
	UpdateParticipantWaitedAnswer(ctx context.Context, in *UpdateWaitedAnswerReq, opts ...client.CallOption) (*UpdateWaitedAnswerResp, error)
	JudgeIfHaveAnswer(ctx context.Context, in *JudgeReq, opts ...client.CallOption) (*JudgeRsp, error)
	AddProblemHavedAnswer(ctx context.Context, in *AddProblemHavedAnswerReq, opts ...client.CallOption) (*AddProblemHavedAnswerRsp, error)
}

type participantManageService struct {
	c    client.Client
	name string
}

func NewParticipantManageService(name string, c client.Client) ParticipantManageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "participantmanage"
	}
	return &participantManageService{
		c:    c,
		name: name,
	}
}

func (c *participantManageService) EventParticipantInsert(ctx context.Context, in *EPInsertReq, opts ...client.CallOption) (*EPInsertRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.EventParticipantInsert", in)
	out := new(EPInsertRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, opts ...client.CallOption) (*PEMessageList, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetParticipantListByUserId", in)
	out := new(PEMessageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetParticipantByUserAndEvent(ctx context.Context, in *PUserEventIdReq, opts ...client.CallOption) (*ParticipantMessage, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetParticipantByUserAndEvent", in)
	out := new(ParticipantMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetCorrectAnswerByParticipantId(ctx context.Context, in *ParticipantIdReq, opts ...client.CallOption) (*WaitAnswerRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetCorrectAnswerByParticipantId", in)
	out := new(WaitAnswerRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetAnswerTimeByParticipantId(ctx context.Context, in *ParticipantIdReq, opts ...client.CallOption) (*AnswerTimeReq, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetAnswerTimeByParticipantId", in)
	out := new(AnswerTimeReq)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetMemberCreditByTeamId(ctx context.Context, in *PTeamEventIdReq, opts ...client.CallOption) (*ParticipantMessageList, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetMemberCreditByTeamId", in)
	out := new(ParticipantMessageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) UpdateUserAnswer(ctx context.Context, in *UpdateUserAnswerReq, opts ...client.CallOption) (*UpdateUserAnswerRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.UpdateUserAnswer", in)
	out := new(UpdateUserAnswerRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) UpdateParticipantWaitedAnswer(ctx context.Context, in *UpdateWaitedAnswerReq, opts ...client.CallOption) (*UpdateWaitedAnswerResp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.UpdateParticipantWaitedAnswer", in)
	out := new(UpdateWaitedAnswerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) JudgeIfHaveAnswer(ctx context.Context, in *JudgeReq, opts ...client.CallOption) (*JudgeRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.JudgeIfHaveAnswer", in)
	out := new(JudgeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) AddProblemHavedAnswer(ctx context.Context, in *AddProblemHavedAnswerReq, opts ...client.CallOption) (*AddProblemHavedAnswerRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.AddProblemHavedAnswer", in)
	out := new(AddProblemHavedAnswerRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParticipantManage service

type ParticipantManageHandler interface {
	EventParticipantInsert(context.Context, *EPInsertReq, *EPInsertRsp) error
	GetParticipantListByUserId(context.Context, *GetPListByUserIdReq, *PEMessageList) error
	GetParticipantByUserAndEvent(context.Context, *PUserEventIdReq, *ParticipantMessage) error
	GetCorrectAnswerByParticipantId(context.Context, *ParticipantIdReq, *WaitAnswerRsp) error
	GetAnswerTimeByParticipantId(context.Context, *ParticipantIdReq, *AnswerTimeReq) error
	GetMemberCreditByTeamId(context.Context, *PTeamEventIdReq, *ParticipantMessageList) error
	UpdateUserAnswer(context.Context, *UpdateUserAnswerReq, *UpdateUserAnswerRsp) error
	UpdateParticipantWaitedAnswer(context.Context, *UpdateWaitedAnswerReq, *UpdateWaitedAnswerResp) error
	JudgeIfHaveAnswer(context.Context, *JudgeReq, *JudgeRsp) error
	AddProblemHavedAnswer(context.Context, *AddProblemHavedAnswerReq, *AddProblemHavedAnswerRsp) error
}

func RegisterParticipantManageHandler(s server.Server, hdlr ParticipantManageHandler, opts ...server.HandlerOption) error {
	type participantManage interface {
		EventParticipantInsert(ctx context.Context, in *EPInsertReq, out *EPInsertRsp) error
		GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, out *PEMessageList) error
		GetParticipantByUserAndEvent(ctx context.Context, in *PUserEventIdReq, out *ParticipantMessage) error
		GetCorrectAnswerByParticipantId(ctx context.Context, in *ParticipantIdReq, out *WaitAnswerRsp) error
		GetAnswerTimeByParticipantId(ctx context.Context, in *ParticipantIdReq, out *AnswerTimeReq) error
		GetMemberCreditByTeamId(ctx context.Context, in *PTeamEventIdReq, out *ParticipantMessageList) error
		UpdateUserAnswer(ctx context.Context, in *UpdateUserAnswerReq, out *UpdateUserAnswerRsp) error
		UpdateParticipantWaitedAnswer(ctx context.Context, in *UpdateWaitedAnswerReq, out *UpdateWaitedAnswerResp) error
		JudgeIfHaveAnswer(ctx context.Context, in *JudgeReq, out *JudgeRsp) error
		AddProblemHavedAnswer(ctx context.Context, in *AddProblemHavedAnswerReq, out *AddProblemHavedAnswerRsp) error
	}
	type ParticipantManage struct {
		participantManage
	}
	h := &participantManageHandler{hdlr}
	return s.Handle(s.NewHandler(&ParticipantManage{h}, opts...))
}

type participantManageHandler struct {
	ParticipantManageHandler
}

func (h *participantManageHandler) EventParticipantInsert(ctx context.Context, in *EPInsertReq, out *EPInsertRsp) error {
	return h.ParticipantManageHandler.EventParticipantInsert(ctx, in, out)
}

func (h *participantManageHandler) GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, out *PEMessageList) error {
	return h.ParticipantManageHandler.GetParticipantListByUserId(ctx, in, out)
}

func (h *participantManageHandler) GetParticipantByUserAndEvent(ctx context.Context, in *PUserEventIdReq, out *ParticipantMessage) error {
	return h.ParticipantManageHandler.GetParticipantByUserAndEvent(ctx, in, out)
}

func (h *participantManageHandler) GetCorrectAnswerByParticipantId(ctx context.Context, in *ParticipantIdReq, out *WaitAnswerRsp) error {
	return h.ParticipantManageHandler.GetCorrectAnswerByParticipantId(ctx, in, out)
}

func (h *participantManageHandler) GetAnswerTimeByParticipantId(ctx context.Context, in *ParticipantIdReq, out *AnswerTimeReq) error {
	return h.ParticipantManageHandler.GetAnswerTimeByParticipantId(ctx, in, out)
}

func (h *participantManageHandler) GetMemberCreditByTeamId(ctx context.Context, in *PTeamEventIdReq, out *ParticipantMessageList) error {
	return h.ParticipantManageHandler.GetMemberCreditByTeamId(ctx, in, out)
}

func (h *participantManageHandler) UpdateUserAnswer(ctx context.Context, in *UpdateUserAnswerReq, out *UpdateUserAnswerRsp) error {
	return h.ParticipantManageHandler.UpdateUserAnswer(ctx, in, out)
}

func (h *participantManageHandler) UpdateParticipantWaitedAnswer(ctx context.Context, in *UpdateWaitedAnswerReq, out *UpdateWaitedAnswerResp) error {
	return h.ParticipantManageHandler.UpdateParticipantWaitedAnswer(ctx, in, out)
}

func (h *participantManageHandler) JudgeIfHaveAnswer(ctx context.Context, in *JudgeReq, out *JudgeRsp) error {
	return h.ParticipantManageHandler.JudgeIfHaveAnswer(ctx, in, out)
}

func (h *participantManageHandler) AddProblemHavedAnswer(ctx context.Context, in *AddProblemHavedAnswerReq, out *AddProblemHavedAnswerRsp) error {
	return h.ParticipantManageHandler.AddProblemHavedAnswer(ctx, in, out)
}
