// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: participantManage.proto

/*
Package participantManage is a generated protocol buffer package.

It is generated from these files:
	participantManage.proto

It has these top-level messages:
	ParticipantMember
	EPInsertReq
	EPInsertRsp
	GetPListByUserIdReq
	PEMessage
	PEMessageList
*/
package participantManage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ParticipantManage service

type ParticipantManageService interface {
	EventParticipantInsert(ctx context.Context, in *EPInsertReq, opts ...client.CallOption) (*EPInsertRsp, error)
	GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, opts ...client.CallOption) (*PEMessageList, error)
}

type participantManageService struct {
	c    client.Client
	name string
}

func NewParticipantManageService(name string, c client.Client) ParticipantManageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "participantmanage"
	}
	return &participantManageService{
		c:    c,
		name: name,
	}
}

func (c *participantManageService) EventParticipantInsert(ctx context.Context, in *EPInsertReq, opts ...client.CallOption) (*EPInsertRsp, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.EventParticipantInsert", in)
	out := new(EPInsertRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantManageService) GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, opts ...client.CallOption) (*PEMessageList, error) {
	req := c.c.NewRequest(c.name, "ParticipantManage.GetParticipantListByUserId", in)
	out := new(PEMessageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParticipantManage service

type ParticipantManageHandler interface {
	EventParticipantInsert(context.Context, *EPInsertReq, *EPInsertRsp) error
	GetParticipantListByUserId(context.Context, *GetPListByUserIdReq, *PEMessageList) error
}

func RegisterParticipantManageHandler(s server.Server, hdlr ParticipantManageHandler, opts ...server.HandlerOption) error {
	type participantManage interface {
		EventParticipantInsert(ctx context.Context, in *EPInsertReq, out *EPInsertRsp) error
		GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, out *PEMessageList) error
	}
	type ParticipantManage struct {
		participantManage
	}
	h := &participantManageHandler{hdlr}
	return s.Handle(s.NewHandler(&ParticipantManage{h}, opts...))
}

type participantManageHandler struct {
	ParticipantManageHandler
}

func (h *participantManageHandler) EventParticipantInsert(ctx context.Context, in *EPInsertReq, out *EPInsertRsp) error {
	return h.ParticipantManageHandler.EventParticipantInsert(ctx, in, out)
}

func (h *participantManageHandler) GetParticipantListByUserId(ctx context.Context, in *GetPListByUserIdReq, out *PEMessageList) error {
	return h.ParticipantManageHandler.GetParticipantListByUserId(ctx, in, out)
}
